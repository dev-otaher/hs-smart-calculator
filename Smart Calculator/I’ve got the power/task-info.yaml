type: edu
custom_name: stage7
files:
- name: src/calculator/Main.java
  visible: true
  text: |
    package calculator;

    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            // put your code here
        }
    }
  learner_created: false
- name: test/Test.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {
        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // tests of functionality of previous steps
                        main.start();

                        // test of /help
                        String output = main.execute("/help").trim();
                        if (output.length() < 4) {
                            return CheckResult.wrong("It seems like there was no any \"help\" message.");
                        }

                        // input empty string
                        output = main.execute("");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Incorrect response to an empty string. " +
                                    "The program should not print anything.");
                        }

                        // testing basic assignment
                        output = main.execute("n = -32");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // testing a big amount of numbers
                        output = main.execute("33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                        if (!output.equals("-3")) {
                            return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.");
                        }

                        // the same with a variable
                        output = main.execute("33 + 20 + 11 + 49 + n - 9 + 1 - 80 + 4").trim();
                        if (!output.equals("-3")) {
                            return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.");
                        }


                        output = main.execute("c = n \nc = -2");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // check value
                        output = main.execute("  c   ").trim();
                        if (!output.equals("-2")) {
                            return CheckResult.wrong("The variable stores not a correct value." +
                                    "May be the program could not assign the value of one variable to another one.");
                        }

                        // the sum of the numbers is zero
                        output = main.execute("11 - 9 + c").trim();
                        if (!output.equals("0")) {
                            return CheckResult.wrong("The problem when sum is equal to 0 has occurred.");
                        }

                        // test of multiple operations
                        output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
                        if (!output.equals("10")) {
                            return CheckResult.wrong("The program cannot process multiple operations with several operators.");
                        }

                        // test of a nonexistent command
                        output = main.execute("/start").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should print \"Unknown command\" " +
                                    "when a nonexistent command is entered.");
                        }

                        // testing invalid variable name
                        output = main.execute("var1 = 1").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The name of variable should contain only Latin letters.");
                        }

                        // testing invalid value
                        output = main.execute("var = 2a").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The value can be an integer number or a value of another variable");
                        }

                        // testing multiple equalization
                        output = main.execute("c = 7 - 1 = 5").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The program could not handle a invalid assignment.");
                        }

                        // testing assignment by unassigned variable
                        output = main.execute("variable = f").trim().toLowerCase();
                        if (!(output.startsWith("unknown") || output.startsWith("invalid"))) {
                            return CheckResult.wrong("The program should not allow an assignment by unassigned variable.");
                        }

                        // checking case sensitivity
                        main.execute("variable = 777");
                        output = main.execute("Variable").trim().toLowerCase();
                        if (!output.startsWith("unknown") && !output.startsWith("invalid")) {
                            return CheckResult.wrong("The program should be case sensitive.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // A test suit for multiplication and division
                        main.start();

                        String output = main.execute("4 * 3").trim();
                        if (!output.equals("12")) {
                            return CheckResult.wrong("The program has problems with multiplication operation.");
                        }

                        output = main.execute("91 / 13").trim();
                        if (!output.equals("7")) {
                            return CheckResult.wrong("The program has problems with division operation.");
                        }

                        // testing all operators
                        main.execute(" a= 7 \n b =2");
                        output = main.execute("a * 4 / b - (3 - 1)").trim();
                        if (!output.equals("12")) {
                            return CheckResult.wrong("The program cannot correctly process several operations.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // testing priority of parentheses
                        main.start();

                        // expression from the example
                        String output = main.execute("7 + 3 * ((4 + 3) * 7 + 1) - 6 / (2 + 1)").trim();
                        if (!output.equals("155")) {
                            return CheckResult.wrong("The program cannot reproduce an example from the task.");
                        }

    //                    // test with a big amount of brackets
    //                    output = main.execute("3 + (9 + ( 68 * 3 / 9)) * ((7 - 2 * 5) / 2) * 6").trim();
    //                    if (!output.equals("-282")) {
    //                        return CheckResult.wrong("Program incorrectly solves expressions with multi-level parentheses");
    //                    }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // a set of negative tests
                        main.start();

                        // tests with unclosed brackets
                        String output = main.execute("8 * (2 + 3").trim().toLowerCase();
                        String output1 = main.execute("4 + 5)").trim().toLowerCase();
                        if (!output.startsWith("invalid") || !output1.startsWith("invalid")) {
                            return CheckResult.wrong("The program could not handle an invalid expression.");
                        }

                        // sequence of * test
                        output = main.execute("2 ************ 2").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("A sequence of \"*\" should return \"Invalid expression\".");
                        }

                        // sequence of / test
                        output = main.execute("2 // 2").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("A sequence of \"/\" should return \"Invalid expression\".");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    })
            );
        }
    }
  learner_created: false
- name: src/calculator/Expression.java
  visible: true
  text: |
    package calculator;

    import java.util.ArrayDeque;
    import java.util.Deque;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.regex.Pattern;

    public class Expression {
        private String expression;
        private static final Map<String, String> variables = new HashMap<>();

        public Expression(String expression) {
            this.expression = expression;
        }

        public Map<String, String> getVariables() {
            return variables;
        }

        public static boolean isInvalid(String expression) {
            return expression.matches("([+-]?\\d+[+-]+)|.*\\*{2,}.*");
        }

        public boolean isVariableAssignment() {
            return expression.contains("=");
        }

        public static boolean isValidIdentifier(String identifier) {
            return identifier.matches("[a-zA-Z]+");
        }

        private static boolean isValidAssignment(String assignment) {
            return isValidIdentifier(assignment) || assignment.matches("-?\\d+");
        }

        public void storeVariable() {
            expression = expression.replaceAll("\\s+", " ");
            String identifier = expression.split("=")[0].trim();
            String assignment = expression.split("=")[1].trim();
            if (!isValidIdentifier(identifier)) {
                System.out.println("Invalid identifier");
                return;
            }
            if (!isValidAssignment(assignment)) {
                System.out.println("Invalid assignment");
                return;
            }
            if (isValidIdentifier(assignment) && !variables.containsKey(assignment)) {
                System.out.println("Unknown variable");
                return;
            }
            variables.put(identifier, variables.getOrDefault(assignment, assignment));
        }

        public boolean isVariableQuery() {
            return expression.matches("\\w+");
        }

        private static boolean isOperator(char op) {
            return Pattern.matches("[+*\\-/]", String.valueOf(op));
        }

        private static boolean isOperator(String op) {
            if (op.length() > 1) return false;
            return isOperator(op.charAt(0));
        }

        private static int getOpPrecedence(char op) {
            return switch (op) {
                case '+', '-' -> 1;
                case '*', '/' -> 2;
                default -> 0;
            };
        }

        public Deque<String> convertInfixToPostfix() throws Exception {
            Deque<Character> opStack = new ArrayDeque<>();
            Deque<String> output = new ArrayDeque<>();
            for (int i = 0; i < expression.length(); i++) {
                char currentChar = expression.charAt(i);
                if (isOperand(String.valueOf(currentChar))) {
                    String buffer = "";
                    while (i < expression.length() && isOperand(String.valueOf(expression.charAt(i)))) {
                        buffer += expression.charAt(i);
                        i++;
                    }
                    output.addLast(buffer);
                    i--;
                } else if (currentChar == '(') {
                    opStack.push(currentChar);
                } else if (currentChar == ')') {
                    boolean foundEquivalent = false;
                    while (!opStack.isEmpty()) {
                        char pop = opStack.pop();
                        if (isOperator(pop)) {
                            output.addLast(String.valueOf(pop));
                        } else if (pop == '(') {
                            foundEquivalent = true;
                            break;
                        }
                    }
                    if (!foundEquivalent) {
                        throw new Exception("Invalid expression");
                    }
                } else if (isOperator(currentChar)) {
                    while (!opStack.isEmpty() && getOpPrecedence(opStack.peek()) >= getOpPrecedence(currentChar)) {
                        output.addLast(String.valueOf(opStack.pop()));
                    }
                    opStack.push(currentChar);
                }
            }
            while (!opStack.isEmpty() && opStack.peek() != '(') {
                output.addLast(String.valueOf(opStack.pop()));
            }
            if (!opStack.isEmpty()) {
                throw new Exception("Invalid expression");
            }
            return output;
        }

        private boolean isOperand(String string) {
            return isValidAssignment(string);
        }

        private int calculate(int a, int b, char op) {
            return switch (op) {
                case '+' -> a + b;
                case '-' -> a - b;
                case '*' -> a * b;
                case '/' -> a / b;
                default -> throw new ArithmeticException("Invalid Operator!");
            };
        }

        private int evaluatePostfix(Deque<String> postfix) {
            Deque<Integer> operandStack = new ArrayDeque<>();
            for (String token : postfix) {
                if (isOperand(token)) {
                    operandStack.push(Integer.valueOf(variables.getOrDefault(token, token)));
                } else if (isOperator(token)) {
                    int op2 = operandStack.pop();
                    int op1 = operandStack.pop();
                    operandStack.push(calculate(op1, op2, token.charAt(0)));
                }
            }
            return operandStack.pop();
        }

        public int evaluate() throws Exception {
            expression = expression.replaceAll("\\s+", " ")
                    .replaceAll("\\++", "+")
                    .replaceAll("-{3}", "-")
                    .replaceAll("-{2}", "+")
                    .replaceAll("-\\+|\\+-", "-");
            Deque<String> postfix = convertInfixToPostfix();
            return evaluatePostfix(postfix);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/42/stages/226/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 17 Aug 2022 20:36:18 UTC
record: 7
